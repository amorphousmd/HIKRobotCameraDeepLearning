# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'mainwindow.ui'
#
# Created by: PyQt5 UI code generator 5.15.7
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtGui import *
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
import sys, os
import cv2, imutils
import threading

sys.path.append("MvImport")
from MvImport.MvCameraControl_class import *
from BasicDemo.CamOperation_class import *

import imutils
global deviceList
deviceList = MV_CC_DEVICE_INFO_LIST()
global tlayerType
tlayerType = MV_GIGE_DEVICE | MV_USB_DEVICE
global cam
cam = MvCamera()
global nSelCamIndex
nSelCamIndex = 0
global obj_cam_operation
obj_cam_operation = 0
global b_is_run
b_is_run = False

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(1269, 615)
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.Cameraseting = QtWidgets.QGroupBox(self.centralwidget)
        self.Cameraseting.setGeometry(QtCore.QRect(800, 40, 371, 461))
        self.Cameraseting.setObjectName("Cameraseting")
        self.Enu_btn = QtWidgets.QPushButton(self.Cameraseting)
        self.Enu_btn.setGeometry(QtCore.QRect(20, 60, 341, 31))
        self.Enu_btn.setObjectName("Enu_btn")
        self.Open_device = QtWidgets.QPushButton(self.Cameraseting)
        self.Open_device.setGeometry(QtCore.QRect(60, 110, 111, 31))
        self.Open_device.setObjectName("Open_device")
        self.Stop_device = QtWidgets.QPushButton(self.Cameraseting)
        self.Stop_device.setGeometry(QtCore.QRect(210, 110, 111, 31))
        self.Stop_device.setObjectName("Stop_device")
        self.continuous_checkbox = QtWidgets.QCheckBox(self.Cameraseting)
        self.continuous_checkbox.setGeometry(QtCore.QRect(60, 170, 151, 21))
        self.continuous_checkbox.setObjectName("continuous_checkbox")
        self.Trigger_checkbox = QtWidgets.QCheckBox(self.Cameraseting)
        self.Trigger_checkbox.setGeometry(QtCore.QRect(220, 170, 121, 21))
        self.Trigger_checkbox.setObjectName("Trigger_checkbox")
        self.Start = QtWidgets.QPushButton(self.Cameraseting)
        self.Start.setGeometry(QtCore.QRect(60, 210, 111, 31))
        self.Start.setObjectName("Start")
        self.Stop = QtWidgets.QPushButton(self.Cameraseting)
        self.Stop.setGeometry(QtCore.QRect(210, 210, 111, 31))
        self.Stop.setObjectName("Stop")
        self.Parameter = QtWidgets.QGroupBox(self.Cameraseting)
        self.Parameter.setGeometry(QtCore.QRect(20, 260, 341, 181))
        self.Parameter.setObjectName("Parameter")
        self.label_2 = QtWidgets.QLabel(self.Parameter)
        self.label_2.setGeometry(QtCore.QRect(20, 30, 101, 21))
        self.label_2.setObjectName("label_2")
        self.label_4 = QtWidgets.QLabel(self.Parameter)
        self.label_4.setGeometry(QtCore.QRect(20, 80, 101, 21))
        self.label_4.setObjectName("label_4")
        self.label_5 = QtWidgets.QLabel(self.Parameter)
        self.label_5.setGeometry(QtCore.QRect(20, 130, 101, 21))
        self.label_5.setObjectName("label_5")
        self.Ex_time_text = QtWidgets.QLabel(self.Parameter)
        self.Ex_time_text.setGeometry(QtCore.QRect(170, 30, 131, 21))
        self.Ex_time_text.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Ex_time_text.setAutoFillBackground(True)
        self.Ex_time_text.setObjectName("Ex_time_text")
        self.Gain_text = QtWidgets.QLabel(self.Parameter)
        self.Gain_text.setGeometry(QtCore.QRect(170, 80, 131, 21))
        self.Gain_text.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Gain_text.setAutoFillBackground(True)
        self.Gain_text.setObjectName("Gain_text")
        self.Frame_rate_text = QtWidgets.QLabel(self.Parameter)
        self.Frame_rate_text.setGeometry(QtCore.QRect(170, 130, 131, 21))
        self.Frame_rate_text.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Frame_rate_text.setAutoFillBackground(True)
        self.Frame_rate_text.setObjectName("Frame_rate_text")
        self.Camera_inf = QtWidgets.QLabel(self.Cameraseting)
        self.Camera_inf.setGeometry(QtCore.QRect(30, 30, 131, 21))
        self.Camera_inf.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Camera_inf.setAutoFillBackground(True)
        self.Camera_inf.setObjectName("Camera_inf")
        self.Num_of_device = QtWidgets.QLabel(self.Cameraseting)
        self.Num_of_device.setGeometry(QtCore.QRect(220, 30, 131, 21))
        self.Num_of_device.setLayoutDirection(QtCore.Qt.RightToLeft)
        self.Num_of_device.setAutoFillBackground(True)
        self.Num_of_device.setObjectName("Num_of_device")
        self.line = QtWidgets.QFrame(self.centralwidget)
        self.line.setGeometry(QtCore.QRect(770, 40, 20, 541))
        self.line.setFrameShape(QtWidgets.QFrame.VLine)
        self.line.setFrameShadow(QtWidgets.QFrame.Sunken)
        self.line.setObjectName("line")
        self.groupBox_2 = QtWidgets.QGroupBox(self.centralwidget)
        self.groupBox_2.setGeometry(QtCore.QRect(10, 10, 751, 541))
        self.groupBox_2.setObjectName("groupBox_2")
        self.Image = QtWidgets.QLabel(self.groupBox_2)
        self.Image.setGeometry(QtCore.QRect(20, 20, 721, 481))
        self.Image.setObjectName("Image")
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 1269, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        self.Enu_btn.clicked.connect(self.enum_devices)
        self.Open_device.clicked.connect(self.open_device)
        self.Stop_device.clicked.connect(self.stop_device)
        self.Start.clicked.connect(self.start_grabbing)
        self.Stop.clicked.connect(self.stop_grabbing)
        self.retranslateUi(MainWindow)



        QtCore.QMetaObject.connectSlotsByName(MainWindow)

    def enum_devices(self):
        Cam = MvCamera()
        global deviceList
        global obj_cam_operation
        deviceList = MV_CC_DEVICE_INFO_LIST()
        tlayerType = MV_GIGE_DEVICE | MV_USB_DEVICE
        ret = MvCamera.MV_CC_EnumDevices(tlayerType, deviceList)
        if ret != 0:
            print('enum devices fail!')
        self.Num_of_device.setText('Find '+ str(deviceList.nDeviceNum)+' camera')
        # self.Camera_inf.setText()

        print ("Find %d devices!" % deviceList.nDeviceNum)

    def open_device(self):
        global deviceList
        global nSelCamIndex
        global obj_cam_operation
        global b_is_run
        print(b_is_run)
        if b_is_run == True:
            self.Camera_inf.setText('Camera is Running!')
        else:
            obj_cam_operation = CameraOperation(cam,deviceList,nSelCamIndex)
            ret = obj_cam_operation.Open_device()
            if ret != 0:
                b_is_run = False
            else:
                self.Camera_inf.setText('open successfully!')
                b_is_run = True





    def stop_device(self):
        global b_is_run
        global obj_cam_operation
        obj_cam_operation.Close_device()
        self.Camera_inf.setText('close successfully!')
        b_is_run = False

    def start_grabbing(self):
        # global obj_cam_operation
        # obj_cam_operation.Start_grabbing()
        # self.h_thread_handle = threading.Thread(target=Ui_MainWindow.Work_thread, args=(self,))
        # self.h_thread_handle.start()
        # ret = self.obj_cam.MV_CC_StartGrabbing()

        self.h_thread_handle = threading.Thread(target=Ui_MainWindow.Work_thread, args=(self,))
        self.h_thread_handle.start()

    def stop_grabbing(self):
        global obj_cam_operation
        obj_cam_operation.Stop_grabbing()

    def load_image(self):
            self.filename = QFileDialog.getOpenFileName(filter="Image (*.*)")[0]
            self.image = cv2.imread(self.filename)
            self.set_image(self.image)

    def set_image(self, image):
        """ This function will take image input and resize it
            only for display purpose and convert it to QImage
            to set at the label.
        """
        self.tmp = image
        image = imutils.resize(image, width=640)
        frame = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        image = QImage(frame, frame.shape[1], frame.shape[0], frame.strides[0], QImage.Format_RGB888)
        self.Image.setPixmap(QtGui.QPixmap.fromImage(image))

    def Work_thread(self):
        while True:
            img = obj_cam_operation.get_image()
            self.set_image(img)

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "MainWindow"))
        self.Cameraseting.setTitle(_translate("MainWindow", "CAMERA SETTING"))
        self.Enu_btn.setText(_translate("MainWindow", "Enum Device"))
        self.Open_device.setText(_translate("MainWindow", "Open Device"))
        self.Stop_device.setText(_translate("MainWindow", "Stop Device"))
        self.continuous_checkbox.setText(_translate("MainWindow", "Continuous Mode"))
        self.Trigger_checkbox.setText(_translate("MainWindow", "Trigger Mode"))
        self.Start.setText(_translate("MainWindow", "Start "))
        self.Stop.setText(_translate("MainWindow", "Stop"))
        self.Parameter.setTitle(_translate("MainWindow", "Parameters"))
        self.label_2.setText(_translate("MainWindow", "Exposure Time"))
        self.label_4.setText(_translate("MainWindow", "Gain"))
        self.label_5.setText(_translate("MainWindow", "Frame Rate"))
        self.Ex_time_text.setText(_translate("MainWindow", ""))
        self.Gain_text.setText(_translate("MainWindow", ""))
        self.Frame_rate_text.setText(_translate("MainWindow", ""))
        self.Camera_inf.setText(_translate("MainWindow", ""))
        self.Num_of_device.setText(_translate("MainWindow", ""))
        self.groupBox_2.setTitle(_translate("MainWindow", "CAMERA"))
        self.Image.setText(_translate("MainWindow", "Image"))


if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())
